{"version":3,"sources":["components/QuestionAnswersCSVUpload.js","App.js","index.js"],"names":["CSVReader","props","useState","csvFile","setCsvFile","headers","setHeaders","csvArray","setCsvArray","tagsList","setTagsList","tags","setTags","mainTags","setMainTags","reactTags","useRef","main","a","readXlsxFile","rows","opt","forEach","el","toLowerCase","includes","push","replace","processCSV","slice","onDelete","useCallback","i","tagIndex","prevTags","filter","_","onAddition","newTag","prevTagsList","some","s","name","length","onDeleteMain","onAdditionMain","hdrs","newArray","map","row","qnsOptions","eachObject","reduce","obj","header","value","split","v","trim","single","answers","qns","option","answer","Answers","questionAnswers","tagsArr","item","index","Tags","tagsArray","it","id","tagsSuggestionsArr","t","submit","certRelated","Domain","Product","productSpecific","questionMode","questionType","skillLevel","sourceCode","sourceType","comments","arrayToStore","question","DomainRow","ProductRow","Nos","rest","commentsRow","qnsToSave","domain","product","fileName","optionsWithAnswers","qnsAns","formData","FormData","append","axios","post","process","response","console","log","data","qnsUpload","status","Question","fileUploadId","_id","questions","resp","giveAnswers","isSingle","onRadioChange","e","currCsvArr","currentIndexQnsAns","curr","target","onCheckedChange","ech","check","ans","type","checked","onChange","className","sm","accept","onClick","files","preventDefault","style","padding","ref","minQueryLength","allowNew","suggestions","xs","bordered","striped","hover","h","bind","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88a8f164.chunk.js","sourcesContent":["import { useRef, useState, useCallback } from \"react\";\nimport readXlsxFile from \"read-excel-file\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport axios from \"axios\";\nimport {\n  Table,\n  Input,\n  Container,\n  Row,\n  Col,\n  FormGroup,\n  Label,\n} from \"reactstrap\";\nexport default function CSVReader(props) {\n  // const { isheader, isSrNo, answerColumnIndex, headerProps } = props;\n  const [csvFile, setCsvFile] = useState();\n  const [headers, setHeaders] = useState([]);\n  const [csvArray, setCsvArray] = useState([]);\n  // const [options, setOptions] = useState([]);\n  const [tagsList, setTagsList] = useState([]);\n  const [tags, setTags] = useState();\n  const [mainTags, setMainTags] = useState();\n  const reactTags = useRef();\n  // [{name: \"\", age: 0, rank: \"\"},{name: \"\", age: 0, rank: \"\"}]\n  const main = async () => {\n    const rows = await readXlsxFile(csvFile);\n    // console.log(\"** Done **\", rows);\n    setHeaders(rows[0]);\n    const opt = [];\n    rows[0].forEach((el) => {\n      el = el || \"\";\n      if (el.toLowerCase().includes(\"option \")) {\n        opt.push(el.toLowerCase().replace(\"option \", \"\").toLowerCase());\n      }\n    });\n    // setOptions(opt);\n    processCSV(rows[0], rows.slice(1));\n  };\n  const onDelete = useCallback(\n    (i, tagIndex) => {\n      const prevTags = tags ? { ...tags } : {};\n      prevTags[i] = prevTags[i].filter((_, i) => i !== tagIndex);\n      setTags(prevTags);\n    },\n    [tags]\n  );\n\n  const onAddition = useCallback(\n    (i, newTag) => {\n      const prevTags = tags ? { ...tags } : {};\n      const prevTagsList = [...tagsList];\n      if (\n        !prevTagsList.some(\n          (s) => s.name.toLowerCase() === newTag.name.toLowerCase()\n        )\n      ) {\n        prevTagsList[prevTagsList.length] = newTag;\n        setTagsList(prevTagsList);\n      }\n      if (\n        prevTags[i].some(\n          (s) => s.name.toLowerCase() === newTag.name.toLowerCase()\n        )\n      )\n        return;\n      prevTags[i] = [...prevTags[i], newTag];\n      setTags(prevTags);\n    },\n    [tags, tagsList]\n  );\n  const onDeleteMain = useCallback(\n    (tagIndex) => {\n      let prevTags = mainTags ? [...mainTags] : [];\n      prevTags = prevTags.filter((_, i) => i !== tagIndex);\n      setMainTags(prevTags);\n    },\n    [mainTags]\n  );\n\n  const onAdditionMain = useCallback(\n    (newTag) => {\n      let prevTags = mainTags ? [...mainTags] : [];\n      const prevTagsList = [...tagsList];\n      if (\n        !prevTagsList.some(\n          (s) => s.name.toLowerCase() === newTag.name.toLowerCase()\n        )\n      ) {\n        prevTagsList[prevTagsList.length] = newTag;\n        setTagsList(prevTagsList);\n      }\n      if (\n        prevTags.some((s) => s.name.toLowerCase() === newTag.name.toLowerCase())\n      )\n        return;\n      prevTags = [...prevTags, newTag];\n      setMainTags(prevTags);\n    },\n    [mainTags, tagsList]\n  );\n  const processCSV = (hdrs, rows) => {\n    const newArray = rows.map((row) => {\n      const qnsOptions = [];\n      const eachObject = hdrs.reduce((obj = {}, header, i) => {\n        let value = row[i];\n        if (header === \"Answers\") {\n          value = value.split(\",\");\n          value = value.map((v) => v.trim());\n          obj.single = value.length === 1;\n        }\n        if (header === \"Tags\" && value) {\n          value = value.split(\",\");\n          value = value.map((v) => v.trim());\n        }\n        if (header.toLowerCase().includes(\"option\") && value) {\n          qnsOptions.push(header.toLowerCase().replace(\"option \", \"\"));\n        }\n        obj[header] = value;\n\n        // obj[header] = values[i].slice(0, values[i].indexOf(\"\\r\"));\n        return obj;\n      }, {});\n      const answers = qnsOptions.map((qns) => {\n        return {\n          option: qns,\n          answer: eachObject.Answers.some((a) => a === qns),\n        };\n      });\n      eachObject.questionAnswers = answers;\n      return eachObject;\n    });\n    setCsvArray(newArray);\n    const tagsArr = {};\n    newArray.forEach((item, index) => {\n      if (item && item.Tags) {\n        const tagsArray = item.Tags.map((it, i) => {\n          return { id: i, name: it };\n        });\n        tagsArr[index] = tagsArray;\n      } else {\n        tagsArr[index] = [];\n      }\n    });\n    const tagsSuggestionsArr = [];\n    newArray.forEach((item, index) => {\n      if (item.Tags && item.Tags.length > 0) {\n        item.Tags.forEach((t) => {\n          if (!tagsSuggestionsArr.some((it) => it.name === t)) {\n            tagsSuggestionsArr.push({ id: tagsSuggestionsArr.length, name: t });\n          }\n        });\n      }\n    });\n    setTagsList(tagsSuggestionsArr);\n    setMainTags(tagsSuggestionsArr);\n    setTags(tagsArr);\n  };\n  // console.log(\"tagsList\", tagsList);\n  // console.log(\"tags\", tags);\n  const submit = async () => {\n    const {\n      \"Cert related\": certRelated,\n      Domain,\n      // \"File name\": fileName,\n      // \"Module (specific)\": moduleSpecific,\n      // \"No of Questions?\": noOfQuestions,\n      // Nos,\n      Product,\n      \"Product specific\": productSpecific,\n      \"Question Mode\": questionMode,\n      \"Question Type\": questionType,\n      \"Skill Level\": skillLevel,\n      \"Source code\": sourceCode,\n      \"Source type\": sourceType,\n      comments,\n    } = csvArray[0];\n    const arrayToStore = csvArray.slice(1).map((question) => {\n      const {\n        \"Cert related\": certRelatedRow,\n        Domain: DomainRow,\n        \"File name\": fileNameRow,\n        \"Module (specific)\": moduleSpecificRow,\n        \"No of Questions?\": noOfQuestionsRow,\n        Nos: NosRow,\n        Product: ProductRow,\n        \"Product specific\": productSpecificRow,\n        \"Question Mode\": questionModeRow,\n        \"Question Type\": questionTypeRow,\n        \"Skill Level\": skillLevelRow,\n        \"Source code\": sourceCodeRow,\n        \"Source type\": sourceTypeRow,\n        questionAnswers,\n        commentsRow,\n        ...rest\n      } = question;\n      const qnsToSave = { ...rest };\n      qnsToSave.certRelated = certRelated;\n      qnsToSave.domain = DomainRow;\n      qnsToSave.product = ProductRow;\n      qnsToSave.fileName = csvFile.name;\n      qnsToSave.productSpecific = productSpecific;\n      qnsToSave.questionMode = questionMode;\n      qnsToSave.questionType = questionType;\n      qnsToSave.skillLevel = skillLevel;\n      qnsToSave.sourceCode = sourceCode;\n      qnsToSave.sourceType = sourceType;\n      qnsToSave.comments = comments;\n      const optionsWithAnswers = [];\n      questionAnswers.forEach((qnsAns) => {\n        if (`Option ${qnsAns.option}` in qnsToSave) {\n          optionsWithAnswers.push({\n            option: qnsToSave[`Option ${qnsAns.option}`],\n            answer: qnsAns.answer,\n          });\n        }\n      });\n      qnsToSave.optionsWithAnswers = optionsWithAnswers;\n      return qnsToSave;\n    });\n    // console.log(\"arrayToStore\", arrayToStore);\n    // eachObject.tags = mainTags.map((t) => t.name);\n\n    const formData = new FormData();\n    formData.append(\"questionFile\", csvFile);\n    mainTags.forEach((t) => {\n      formData.append(\"tags\", t.name);\n    });\n    formData.append(\"certRelated\", certRelated);\n    formData.append(\"domain\", Domain);\n    formData.append(\"noOfQuestions\", arrayToStore.length);\n    formData.append(\"product\", Product);\n    formData.append(\"productSpecific\", productSpecific);\n    formData.append(\"questionMode\", questionMode);\n\n    formData.append(\"questionType\", questionType);\n    formData.append(\"skillLevel\", skillLevel);\n    formData.append(\"sourceCode\", sourceCode);\n    formData.append(\"sourceType\", sourceType);\n    formData.append(\"comments\", comments);\n    try {\n      const response = await axios.post(\n        `${process.env.REACT_APP_SERVER_URL}/api/questions/upload`,\n        formData\n      );\n      console.log(\"file upload\", response.data.qnsUpload);\n      if (response.data.status) {\n        const data = arrayToStore.map((item) => {\n          return {\n            question: item.Question,\n            optionsWithAnswers: item.optionsWithAnswers || [],\n            single: item.single,\n            fileName: item.fileName,\n            tags: item.Tags || [],\n            fileUploadId: response.data.qnsUpload._id,\n          };\n        });\n        const resp = await axios.post(\n          `${process.env.REACT_APP_SERVER_URL}/api/questions/setQuestions`,\n          { questions: data }\n        );\n        console.log(\"questions\", resp.data.questions);\n      }\n    } catch {}\n  };\n  const upload = () => {\n    main();\n    // const file = csvFile;\n    // const reader = new FileReader();\n\n    // reader.onload = function (e) {\n    //   const text = e.target.result;\n    //   console.log(text);\n    //   processCSV(text, \";\");\n    // };\n\n    // reader.readAsText(file);\n  };\n  // console.log(headers);\n  // console.log(\"csvArray\", csvArray);\n  // console.log(csvArray.length > 0);\n  // console.log(\"options\", options);\n  const giveAnswers = (index, isSingle, questionAnswers) => {\n    const onRadioChange = (e) => {\n      debugger;\n      const currCsvArr = [...csvArray];\n      let currentIndexQnsAns = [...currCsvArr[index].questionAnswers];\n      currentIndexQnsAns = currentIndexQnsAns.map((curr) => {\n        if (curr.option === e.target.value) {\n          curr.answer = true;\n        } else {\n          curr.answer = false;\n        }\n        return curr;\n      });\n      currCsvArr[index].questionAnswers = currentIndexQnsAns;\n      setCsvArray(currCsvArr);\n    };\n    const onCheckedChange = (e) => {\n      debugger;\n      const currCsvArr = [...csvArray];\n      let currentIndexQnsAns = [...currCsvArr[index].questionAnswers];\n      currentIndexQnsAns = currentIndexQnsAns.map((ech) => {\n        if (ech.option === e.target.value) ech.answer = !ech.answer;\n        return ech;\n      });\n      currCsvArr[index].questionAnswers = currentIndexQnsAns;\n      setCsvArray(currCsvArr);\n    };\n    let markup;\n    if (isSingle) {\n      markup = (\n        <FormGroup check>\n          <Container>\n            <Row>\n              {questionAnswers.map((ans) => {\n                return (\n                  <Col>\n                    <Input\n                      type=\"radio\"\n                      name={`radio${index}`}\n                      checked={ans.answer}\n                      value={ans.option}\n                      onChange={onRadioChange}\n                    />\n                    <Label check>{ans.option}</Label>\n                  </Col>\n                );\n              })}\n            </Row>\n          </Container>\n        </FormGroup>\n      );\n    } else {\n      markup = (\n        <Container>\n          <Row>\n            <Col>\n              {questionAnswers.map((ans) => {\n                return (\n                  <FormGroup check>\n                    <Input\n                      type=\"checkbox\"\n                      checked={ans.answer}\n                      value={ans.option}\n                      onChange={onCheckedChange}\n                    />\n                    <Label check>{ans.option}</Label>\n                  </FormGroup>\n                );\n              })}\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n    return markup;\n  };\n  return (\n    <>\n      <form id=\"csv-form\" className=\"col-xs-9\">\n        <Container className=\"mt-5\">\n          <Row className=\"justify-content-center mb-3\">\n            <Col sm={10}>\n              <Input\n                name=\"file\"\n                type=\"file\"\n                accept=\".xlsx\"\n                id=\"csvFile\"\n                onClick={(e) => {\n                  setCsvArray([]);\n                  setMainTags([]);\n                }}\n                onChange={(e) => {\n                  setCsvFile(e.target.files[0]);\n                }}\n              />\n              {/* <input\n        type=\"file\"\n      ></input> */}\n              {/* <br /> */}\n            </Col>\n            <Col sm={\"auto\"} className=\"p-0\">\n              <button\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (csvFile) upload();\n                }}\n                style={{ padding: \"5px\" }}\n              >\n                Upload Excel\n              </button>\n            </Col>\n          </Row>\n          {tagsList && tagsList.length > 0 && (\n            <Row className=\"justify-content-center mb-3\">\n              <ReactTags\n                ref={reactTags}\n                minQueryLength={1}\n                tags={mainTags ? mainTags : []}\n                allowNew\n                suggestions={tagsList || []}\n                onDelete={onDeleteMain}\n                onAddition={onAdditionMain}\n              />\n            </Row>\n          )}\n          {csvArray.length > 0 && (\n            <Row className=\"justify-content-center mb-3\">\n              <Col xs={1}>\n                <button\n                  onClick={(e) => {\n                    e.preventDefault();\n                    submit();\n                  }}\n                  style={{ padding: \"5px\" }}\n                >\n                  Submit\n                </button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </form>\n      <br />\n      <br />\n      {csvArray.length > 0 ? (\n        <>\n          <Table bordered striped hover>\n            <thead>\n              <tr className=\"question-header\">\n                {headers.map((h, index) => {\n                  return <th>{h}</th>;\n                })}\n              </tr>\n            </thead>\n            <tbody>\n              {csvArray.map((item, i) => {\n                return (\n                  <tr key={i}>\n                    {headers.map((h, index) => {\n                      if (index === 0)\n                        return (\n                          <td className=\"question-first-col\">\n                            {item[headers[index]]}\n                          </td>\n                        );\n                      if (h === \"Tags\") {\n                        return (\n                          <td>\n                            <ReactTags\n                              ref={reactTags}\n                              minQueryLength={1}\n                              tags={tags ? tags[i] : []}\n                              allowNew\n                              suggestions={tagsList || []}\n                              onDelete={onDelete.bind(null, i)}\n                              onAddition={onAddition.bind(null, i)}\n                            />\n                          </td>\n                        );\n                      } else if (h === \"Answers\") {\n                        return (\n                          <td>\n                            {giveAnswers(i, item.single, item.questionAnswers)}\n                          </td>\n                        );\n                      } else return <td>{item[headers[index]]}</td>;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </>\n      ) : null}\n    </>\n  );\n}\n","import QuestionAnswersCSVUpload from \"./components/QuestionAnswersCSVUpload\";\nimport \"./App.css\";\nconsole.log(\"REACT_APP_SERVER_URL\", process.env.REACT_APP_SERVER_URL);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuestionAnswersCSVUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}