{"version":3,"sources":["components/QuestionAnswersCSVUpload.js","App.js","index.js"],"names":["CSVReader","props","useState","csvFile","setCsvFile","headers","setHeaders","csvArray","setCsvArray","options","setOptions","main","a","readXlsxFile","rows","console","log","opt","forEach","el","toLowerCase","includes","push","replace","processCSV","slice","hdrs","newArray","map","row","eachObject","reduce","obj","header","i","value","split","v","trim","single","length","id","type","accept","onChange","e","target","files","onClick","preventDefault","bordered","striped","hover","h","index","item","App","className","ReactDOM","render","document","getElementById"],"mappings":"wPAGe,SAASA,EAAUC,GAEhC,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAI,uCAAG,8BAAAC,EAAA,sEACQC,YAAaV,GADrB,OACLW,EADK,OAEXC,QAAQC,IAAI,aAAcF,GAC1BR,EAAWQ,EAAK,IACVG,EAAM,GACZH,EAAK,GAAGI,SAAQ,SAACC,GAEXA,EAAGC,cAAcC,SAAS,YAC5BJ,EAAIK,KAAKH,EAAGC,cAAcG,QAAQ,UAAW,IAAIH,kBAGrDV,EAAWO,GACXO,EAAWV,EAAK,GAAIA,EAAKW,MAAM,IAZpB,2CAAH,qDAeJD,EAAa,SAACE,EAAMZ,GACxB,IAAMa,EAAWb,EAAKc,KAAI,SAACC,GACzB,IAAMC,EAAaJ,EAAKK,QAAO,WAA0B,IAAzBC,EAAwB,uDAAlB,GAAIC,EAAc,uCAANC,EAAM,uCAClDC,EAAQN,EAAIK,GAUhB,MATe,YAAXD,IAEFE,GADAA,EAAQA,EAAMC,MAAM,MACNR,KAAI,SAACS,GAAD,OAAOA,EAAEC,UAC3BN,EAAIO,OAA0B,IAAjBJ,EAAMK,QAGrBR,EAAIC,GAAUE,EAGPH,IACN,IACH,OAAOF,KAETtB,EAAYmB,IAmBd,OAJAZ,QAAQC,IAAIX,GACZU,QAAQC,IAAI,WAAYT,GACxBQ,QAAQC,IAAIT,EAASiC,OAAS,GAC9BzB,QAAQC,IAAI,UAAWP,GAErB,uBAAMgC,GAAG,WAAT,UACE,uBACEC,KAAK,OACLC,OAAO,QACPF,GAAG,UACHG,SAAU,SAACC,GACTzC,EAAWyC,EAAEC,OAAOC,MAAM,OAG9B,uBACA,wBACEC,QAAS,SAACH,GACRA,EAAEI,iBACE9C,GA9BVQ,KA2BE,oBAQA,uBACA,uBACCJ,EAASiC,OAAS,EACjB,mCACE,eAAC,IAAD,CAAOU,UAAQ,EAACC,SAAO,EAACC,OAAK,EAA7B,UACE,gCACE,6BACG/C,EAAQuB,KAAI,SAACyB,EAAGC,GACf,OAAO,6BAAKD,WAIlB,gCACG9C,EAASqB,KAAI,SAAC2B,EAAMrB,GACnB,OACE,6BACG7B,EAAQuB,KAAI,SAACyB,EAAGC,GACf,OAAO,6BAAKC,EAAKlD,EAAQiD,UAFpBpB,aAUjB,Q,MC9FKsB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,MCCNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e16222b0.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport { Table } from \"reactstrap\";\r\nexport default function CSVReader(props) {\r\n  // const { isheader, isSrNo, answerColumnIndex, headerProps } = props;\r\n  const [csvFile, setCsvFile] = useState();\r\n  const [headers, setHeaders] = useState([]);\r\n  const [csvArray, setCsvArray] = useState([]);\r\n  const [options, setOptions] = useState([]);\r\n  // [{name: \"\", age: 0, rank: \"\"},{name: \"\", age: 0, rank: \"\"}]\r\n  const main = async () => {\r\n    const rows = await readXlsxFile(csvFile);\r\n    console.log(\"** Done **\", rows);\r\n    setHeaders(rows[0]);\r\n    const opt = [];\r\n    rows[0].forEach((el) => {\r\n      debugger;\r\n      if (el.toLowerCase().includes(\"option \")) {\r\n        opt.push(el.toLowerCase().replace(\"option \", \"\").toLowerCase());\r\n      }\r\n    });\r\n    setOptions(opt);\r\n    processCSV(rows[0], rows.slice(1));\r\n  };\r\n\r\n  const processCSV = (hdrs, rows) => {\r\n    const newArray = rows.map((row) => {\r\n      const eachObject = hdrs.reduce((obj = {}, header, i) => {\r\n        let value = row[i];\r\n        if (header === \"Answers\") {\r\n          value = value.split(\",\");\r\n          value = value.map((v) => v.trim());\r\n          obj.single = value.length === 1;\r\n        }\r\n\r\n        obj[header] = value;\r\n\r\n        // obj[header] = values[i].slice(0, values[i].indexOf(\"\\r\"));\r\n        return obj;\r\n      }, {});\r\n      return eachObject;\r\n    });\r\n    setCsvArray(newArray);\r\n  };\r\n  const submit = () => {\r\n    main();\r\n    // const file = csvFile;\r\n    // const reader = new FileReader();\r\n\r\n    // reader.onload = function (e) {\r\n    //   const text = e.target.result;\r\n    //   console.log(text);\r\n    //   processCSV(text, \";\");\r\n    // };\r\n\r\n    // reader.readAsText(file);\r\n  };\r\n  console.log(headers);\r\n  console.log(\"csvArray\", csvArray);\r\n  console.log(csvArray.length > 0);\r\n  console.log(\"options\", options);\r\n  return (\r\n    <form id=\"csv-form\">\r\n      <input\r\n        type=\"file\"\r\n        accept=\".xlsx\"\r\n        id=\"csvFile\"\r\n        onChange={(e) => {\r\n          setCsvFile(e.target.files[0]);\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <button\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          if (csvFile) submit();\r\n        }}\r\n      >\r\n        Submit\r\n      </button>\r\n      <br />\r\n      <br />\r\n      {csvArray.length > 0 ? (\r\n        <>\r\n          <Table bordered striped hover>\r\n            <thead>\r\n              <tr>\r\n                {headers.map((h, index) => {\r\n                  return <th>{h}</th>;\r\n                })}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {csvArray.map((item, i) => {\r\n                return (\r\n                  <tr key={i}>\r\n                    {headers.map((h, index) => {\r\n                      return <td>{item[headers[index]]}</td>;\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      ) : null}\r\n    </form>\r\n  );\r\n}\r\n","import QuestionAnswersCSVUpload from \"./components/QuestionAnswersCSVUpload\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuestionAnswersCSVUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}