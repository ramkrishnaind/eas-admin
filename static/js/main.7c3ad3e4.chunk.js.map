{"version":3,"sources":["components/TalentProfileUpload.js","App.js","index.js"],"names":["TalentProfileUpload","props","useState","csvFile","setCsvFile","headers","setHeaders","secSkillUniqueJobs","setSecSkillUniqueJobs","csvArray","setCsvArray","stepsObject","setStepsObject","main","a","readXlsxFile","rows","processCSV","slice","hdrs","uniqJobs","newArray","map","row","secSkill","eachObject","reduce","obj","header","i","value","secSkillObj","find","item","split","v","replace","trim","res","forEach","includes","push","length","jobs","founduniqueJob","some","objFinal","Object","keys","jobItem","console","log","submit","formData","FormData","append","JSON","stringify","axios","post","process","resp","data","talentProfileUpload","id","className","sm","name","type","accept","onClick","e","onChange","target","files","preventDefault","style","padding","xs","bordered","striped","hover","h","index","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c3ad3e4.chunk.js","sourcesContent":["import { useRef, useState, useCallback } from \"react\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport ReactTags from \"react-tag-autocomplete\";\r\nimport axios from \"axios\";\r\nimport { Table, Input, Container, Row, Col } from \"reactstrap\";\r\nexport default function TalentProfileUpload(props) {\r\n  // const { isheader, isSrNo, answerColumnIndex, headerProps } = props;\r\n  const [csvFile, setCsvFile] = useState();\r\n  const [headers, setHeaders] = useState([]);\r\n  const [secSkillUniqueJobs, setSecSkillUniqueJobs] = useState([]);\r\n  const [csvArray, setCsvArray] = useState([]);\r\n  const [stepsObject, setStepsObject] = useState({});\r\n  // [{name: \"\", age: 0, rank: \"\"},{name: \"\", age: 0, rank: \"\"}]\r\n  const main = async () => {\r\n    const rows = await readXlsxFile(csvFile);\r\n    setHeaders(rows[0]);\r\n    processCSV(rows[0], rows.slice(1));\r\n  };\r\n\r\n  const processCSV = (hdrs, rows) => {\r\n    let uniqJobs = [...secSkillUniqueJobs];\r\n    const newArray = rows.map((row) => {\r\n      let secSkill;\r\n      const eachObject = hdrs.reduce((obj = {}, header, i) => {\r\n        if (i <= 5) {\r\n          let value = row[i];\r\n          if (i === 1) {\r\n            secSkill = value;\r\n          }\r\n          if (header === \"Jobs\") {\r\n            let secSkillObj = uniqJobs.find(\r\n              (item) => item.secSkill === secSkill\r\n            );\r\n            value = value || \"\";\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.replace(\"\\t\", \"\").trim());\r\n            const res = [];\r\n            value.forEach((item) => {\r\n              if (!res.includes(item)) res.push(item);\r\n            });\r\n            value = res;\r\n\r\n            if (value.length > 0) {\r\n              if (secSkillObj) {\r\n                const res = [];\r\n                secSkillObj.jobs.forEach((item) => {\r\n                  if (!res.includes(item)) res.push(item);\r\n                });\r\n                secSkillObj.jobs = res;\r\n              } else {\r\n                secSkillObj = { secSkill, jobs: [...value] };\r\n              }\r\n            }\r\n            const founduniqueJob = uniqJobs.some(\r\n              (item) => item.secSkill === secSkill\r\n            );\r\n\r\n            if (!founduniqueJob) {\r\n              uniqJobs.push(secSkillObj);\r\n            }\r\n\r\n            uniqJobs = uniqJobs.map((item) => {\r\n              debugger;\r\n              if (item.secSkill === secSkill) {\r\n                return secSkillObj;\r\n              } else {\r\n                return item;\r\n              }\r\n            });\r\n          }\r\n          if (header === \"Top Products\") {\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.trim());\r\n          }\r\n          obj[header] = value;\r\n        }\r\n        return obj;\r\n      }, {});\r\n      return eachObject;\r\n    });\r\n    setSecSkillUniqueJobs(uniqJobs);\r\n\r\n    setCsvArray(newArray);\r\n    const objFinal = {};\r\n    rows.forEach((row) => {\r\n      hdrs.forEach((header, i) => {\r\n        // debugger;\r\n        if (i <= 5) {\r\n          if (i === 0) {\r\n            let value = row[0];\r\n            // if (value !== null) debugger;\r\n            if (\r\n              value !== null &&\r\n              (Object.keys(objFinal).length === 0 || !objFinal[value])\r\n            ) {\r\n              // debugger;\r\n              objFinal[value] = {};\r\n            }\r\n          }\r\n          if (i === 1) {\r\n            const jobItem = uniqJobs.find((item) => item.secSkill === row[1]);\r\n            const obj = {};\r\n            if (jobItem) {\r\n              obj.jobs = jobItem.jobs;\r\n            }\r\n            if (row[0] !== null) {\r\n              if (\r\n                !objFinal[row[0]][row[1]] ||\r\n                Object.keys(objFinal[row[0]]).length === 0\r\n              ) {\r\n                objFinal[row[0]][row[1]] = obj;\r\n              }\r\n            } else {\r\n              if (!objFinal[row[1]]) objFinal[row[1]] = obj;\r\n            }\r\n          }\r\n          if (i === 2) {\r\n            if (row[0] !== null) {\r\n              if (\r\n                !objFinal[row[0]][row[1]][row[2]] ||\r\n                Object.keys(objFinal[row[0]][row[1]]).length === 0\r\n              ) {\r\n                // if (\r\n                //   Object.keys(objFinal[row[0]][row[1]]).length === 0 ||\r\n                //   (Object.keys(objFinal[row[0]][row[1]]).length > 0 &&\r\n                //     !objFinal[row[0]][row[1]][row[2]])\r\n                // ) {\r\n                objFinal[row[0]][row[1]][row[2]] = {};\r\n              }\r\n            } else {\r\n              if (\r\n                Object.keys(objFinal[row[1]]).length === 0 ||\r\n                (objFinal[row[1]].keys && !objFinal[row[1]][row[2]])\r\n              ) {\r\n                objFinal[row[1]][row[2]] = {};\r\n              }\r\n            }\r\n          }\r\n          if (header === \"Top Products\") {\r\n            let value = row[i];\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.trim());\r\n\r\n            if (row[0] !== null) {\r\n              objFinal[row[0]][row[1]][row[2]] = value;\r\n            } else {\r\n              objFinal[row[1]][row[2]] = value;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n    setStepsObject(objFinal);\r\n  };\r\n  console.log(\"csvArray\", csvArray);\r\n  console.log(\"secSkillUniqueJobs\", secSkillUniqueJobs);\r\n  console.log(\"stepsObject\", stepsObject);\r\n  // console.log(\"sendArray\", sendArray);\r\n  const submit = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"talentProfileFile\", csvFile);\r\n    formData.append(\"steps\", JSON.stringify(stepsObject));\r\n    try {\r\n      const resp = await axios.post(\r\n        `${process.env.REACT_APP_SERVER_URL}/api/talentProfile/setTalentProfileSteps`,\r\n        formData\r\n      );\r\n      console.log(\"file upload\", resp.data.talentProfileUpload);\r\n    } catch {}\r\n  };\r\n  const upload = () => {\r\n    main();\r\n  };\r\n  return (\r\n    <>\r\n      <form id=\"csv-form\" className=\"col-xs-9\">\r\n        <Container className=\"mt-5\">\r\n          <Row className=\"justify-content-center mb-3\">\r\n            <Col sm={10}>\r\n              <Input\r\n                name=\"file\"\r\n                type=\"file\"\r\n                accept=\".xlsx\"\r\n                id=\"csvFile\"\r\n                onClick={(e) => {\r\n                  setCsvArray([]);\r\n                }}\r\n                onChange={(e) => {\r\n                  setCsvFile(e.target.files[0]);\r\n                }}\r\n              />\r\n              {/* <input\r\n        type=\"file\"\r\n      ></input> */}\r\n              {/* <br /> */}\r\n            </Col>\r\n            <Col sm={\"auto\"} className=\"p-0\">\r\n              <button\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  if (csvFile) upload();\r\n                }}\r\n                style={{ padding: \"5px\" }}\r\n              >\r\n                Upload Excel\r\n              </button>\r\n            </Col>\r\n          </Row>\r\n          {csvArray.length > 0 && (\r\n            <Row className=\"justify-content-center mb-3\">\r\n              <Col xs={1}>\r\n                <button\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    submit();\r\n                  }}\r\n                  style={{ padding: \"5px\" }}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Container>\r\n      </form>\r\n      <br />\r\n      <br />\r\n      {csvArray.length > 0 ? (\r\n        <>\r\n          <Table bordered striped hover>\r\n            <thead>\r\n              <tr className=\"question-header\">\r\n                {headers.map((h, index) => {\r\n                  return <th key={index}>{h}</th>;\r\n                })}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {csvArray.map((item, i) => {\r\n                return (\r\n                  <tr key={i}>\r\n                    {headers.map((h, index) => {\r\n                      // if (index === 0)\r\n                      //   return (\r\n                      //     <td className=\"question-first-col\" key={index}>\r\n                      //       {item[headers[index]]}\r\n                      //     </td>\r\n                      //   );\r\n                      return index <= 3 ? (\r\n                        <td>{item[headers[index]]}</td>\r\n                      ) : null;\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import QuestionAnswersCSVUpload from \"./components/QuestionAnswersCSVUpload\";\nimport TalentProfileUpload from \"./components/TalentProfileUpload\";\nimport \"./App.css\";\nconsole.log(\"REACT_APP_SERVER_URL\", process.env.REACT_APP_SERVER_URL);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TalentProfileUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}