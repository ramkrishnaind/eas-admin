{"version":3,"sources":["components/TalentProfileUpload.js","App.js","index.js"],"names":["TalentProfileUpload","props","useState","csvFile","setCsvFile","headers","setHeaders","csvArray","setCsvArray","stepsObject","setStepsObject","main","a","readXlsxFile","rows","processCSV","slice","hdrs","newArray","map","row","eachObject","reduce","obj","header","i","value","split","v","trim","objFinal","forEach","Object","keys","length","console","log","submit","formData","FormData","append","JSON","stringify","axios","post","process","resp","data","talentProfileUpload","id","className","sm","name","type","accept","onClick","e","onChange","target","files","preventDefault","style","padding","xs","bordered","striped","hover","h","index","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1de0f8c1.chunk.js","sourcesContent":["import { useRef, useState, useCallback } from \"react\";\nimport readXlsxFile from \"read-excel-file\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport axios from \"axios\";\nimport { Table, Input, Container, Row, Col } from \"reactstrap\";\nexport default function TalentProfileUpload(props) {\n  // const { isheader, isSrNo, answerColumnIndex, headerProps } = props;\n  const [csvFile, setCsvFile] = useState();\n  const [headers, setHeaders] = useState([]);\n  const [csvArray, setCsvArray] = useState([]);\n  const [stepsObject, setStepsObject] = useState({});\n  // [{name: \"\", age: 0, rank: \"\"},{name: \"\", age: 0, rank: \"\"}]\n  const main = async () => {\n    const rows = await readXlsxFile(csvFile);\n    setHeaders(rows[0]);\n    processCSV(rows[0], rows.slice(1));\n  };\n\n  const processCSV = (hdrs, rows) => {\n    const newArray = rows.map((row) => {\n      const eachObject = hdrs.reduce((obj = {}, header, i) => {\n        if (i <= 3) {\n          let value = row[i];\n\n          if (header === \"Top Products\") {\n            value = value.split(\",\");\n            value = value.map((v) => v.trim());\n          }\n          obj[header] = value;\n        }\n        return obj;\n      }, {});\n      return eachObject;\n    });\n    setCsvArray(newArray);\n    const objFinal = {};\n    rows.forEach((row) => {\n      hdrs.forEach((header, i) => {\n        // debugger;\n        if (i <= 3) {\n          if (i === 0) {\n            let value = row[0];\n            // if (value !== null) debugger;\n            if (\n              value !== null &&\n              (Object.keys(objFinal).length === 0 || !objFinal[value])\n            ) {\n              // debugger;\n              objFinal[value] = {};\n            }\n          }\n          if (i === 1) {\n            if (row[0] !== null) {\n              debugger;\n              if (\n                !objFinal[row[0]][row[1]] ||\n                Object.keys(objFinal[row[0]]).length === 0\n              ) {\n                objFinal[row[0]][row[1]] = {};\n              }\n            } else {\n              if (!objFinal[row[1]]) objFinal[row[1]] = {};\n            }\n          }\n          if (i === 2) {\n            if (row[0] !== null) {\n              if (\n                !objFinal[row[0]][row[1]][row[2]] ||\n                Object.keys(objFinal[row[0]][row[1]]).length === 0\n              ) {\n                // if (\n                //   Object.keys(objFinal[row[0]][row[1]]).length === 0 ||\n                //   (Object.keys(objFinal[row[0]][row[1]]).length > 0 &&\n                //     !objFinal[row[0]][row[1]][row[2]])\n                // ) {\n                objFinal[row[0]][row[1]][row[2]] = {};\n              }\n            } else {\n              if (\n                Object.keys(objFinal[row[1]]).length === 0 ||\n                (objFinal[row[1]].keys && !objFinal[row[1]][row[2]])\n              ) {\n                objFinal[row[1]][row[2]] = {};\n              }\n            }\n          }\n          if (header === \"Top Products\") {\n            let value = row[i];\n            value = value.split(\",\");\n            value = value.map((v) => v.trim());\n\n            if (row[0] !== null) {\n              objFinal[row[0]][row[1]][row[2]] = value;\n            } else {\n              objFinal[row[1]][row[2]] = value;\n            }\n          }\n        }\n      });\n    });\n    setStepsObject(objFinal);\n  };\n  console.log(\"csvArray\", csvArray);\n  // console.log(\"sendArray\", sendArray);\n  const submit = async () => {\n    const formData = new FormData();\n    formData.append(\"talentProfileFile\", csvFile);\n    formData.append(\"steps\", JSON.stringify(stepsObject));\n    try {\n      const resp = await axios.post(\n        `${process.env.REACT_APP_SERVER_URL}/api/talentProfile/setTalentProfileSteps`,\n        formData\n      );\n      console.log(\"file upload\", resp.data.talentProfileUpload);\n    } catch {}\n  };\n  const upload = () => {\n    main();\n  };\n  return (\n    <>\n      <form id=\"csv-form\" className=\"col-xs-9\">\n        <Container className=\"mt-5\">\n          <Row className=\"justify-content-center mb-3\">\n            <Col sm={10}>\n              <Input\n                name=\"file\"\n                type=\"file\"\n                accept=\".xlsx\"\n                id=\"csvFile\"\n                onClick={(e) => {\n                  setCsvArray([]);\n                }}\n                onChange={(e) => {\n                  setCsvFile(e.target.files[0]);\n                }}\n              />\n              {/* <input\n        type=\"file\"\n      ></input> */}\n              {/* <br /> */}\n            </Col>\n            <Col sm={\"auto\"} className=\"p-0\">\n              <button\n                onClick={(e) => {\n                  e.preventDefault();\n                  if (csvFile) upload();\n                }}\n                style={{ padding: \"5px\" }}\n              >\n                Upload Excel\n              </button>\n            </Col>\n          </Row>\n          {csvArray.length > 0 && (\n            <Row className=\"justify-content-center mb-3\">\n              <Col xs={1}>\n                <button\n                  onClick={(e) => {\n                    e.preventDefault();\n                    submit();\n                  }}\n                  style={{ padding: \"5px\" }}\n                >\n                  Submit\n                </button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </form>\n      <br />\n      <br />\n      {csvArray.length > 0 ? (\n        <>\n          <Table bordered striped hover>\n            <thead>\n              <tr className=\"question-header\">\n                {headers.map((h, index) => {\n                  return <th key={index}>{h}</th>;\n                })}\n              </tr>\n            </thead>\n            <tbody>\n              {csvArray.map((item, i) => {\n                return (\n                  <tr key={i}>\n                    {headers.map((h, index) => {\n                      // if (index === 0)\n                      //   return (\n                      //     <td className=\"question-first-col\" key={index}>\n                      //       {item[headers[index]]}\n                      //     </td>\n                      //   );\n                      return index <= 3 ? (\n                        <td>{item[headers[index]]}</td>\n                      ) : null;\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </>\n      ) : null}\n    </>\n  );\n}\n","import QuestionAnswersCSVUpload from \"./components/QuestionAnswersCSVUpload\";\nimport TalentProfileUpload from \"./components/TalentProfileUpload\";\nimport \"./App.css\";\nconsole.log(\"REACT_APP_SERVER_URL\", process.env.REACT_APP_SERVER_URL);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TalentProfileUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}