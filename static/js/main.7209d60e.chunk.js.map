{"version":3,"sources":["components/QuestionAnswersCSVUpload.js","App.js","index.js"],"names":["CSVReader","props","useState","csvFile","setCsvFile","headers","setHeaders","csvArray","setCsvArray","setOptions","tagsList","setTagsList","tags","setTags","mainTags","setMainTags","reactTags","useRef","main","a","readXlsxFile","rows","opt","forEach","el","toLowerCase","includes","push","replace","processCSV","slice","onDelete","useCallback","i","tagIndex","prevTags","filter","_","onAddition","newTag","prevTagsList","some","s","name","length","onDeleteMain","onAdditionMain","hdrs","newArray","map","row","qnsOptions","eachObject","reduce","obj","header","value","split","v","trim","single","answers","qns","option","answer","Answers","questionAnswers","tagsArr","item","index","Tags","tagsArray","it","id","tagsSuggestionsArr","t","submit","certRelated","Domain","Nos","Product","productSpecific","questionMode","questionType","skillLevel","sourceCode","sourceType","comments","arrayToStore","question","DomainRow","ProductRow","rest","commentsRow","qnsToSave","domain","product","fileName","optionsWithAnswers","qnsAns","formData","FormData","append","axios","post","process","response","console","log","data","qnsUpload","status","Question","fileUploadId","_id","questions","resp","giveAnswers","isSingle","onRadioChange","e","currCsvArr","currentIndexQnsAns","curr","target","onCheckedChange","ech","check","ans","type","checked","onChange","className","sm","accept","onClick","files","preventDefault","style","padding","ref","minQueryLength","allowNew","suggestions","xs","bordered","striped","hover","h","bind","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7209d60e.chunk.js","sourcesContent":["import { useRef, useState, useCallback } from \"react\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport ReactTags from \"react-tag-autocomplete\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Table,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  FormGroup,\r\n  Label,\r\n} from \"reactstrap\";\r\nexport default function CSVReader(props) {\r\n  // const { isheader, isSrNo, answerColumnIndex, headerProps } = props;\r\n  const [csvFile, setCsvFile] = useState();\r\n  const [headers, setHeaders] = useState([]);\r\n  const [csvArray, setCsvArray] = useState([]);\r\n  const [options, setOptions] = useState([]);\r\n  const [tagsList, setTagsList] = useState([]);\r\n  const [tags, setTags] = useState();\r\n  const [mainTags, setMainTags] = useState();\r\n  const reactTags = useRef();\r\n  // [{name: \"\", age: 0, rank: \"\"},{name: \"\", age: 0, rank: \"\"}]\r\n  const main = async () => {\r\n    const rows = await readXlsxFile(csvFile);\r\n    // console.log(\"** Done **\", rows);\r\n    setHeaders(rows[0]);\r\n    const opt = [];\r\n    rows[0].forEach((el) => {\r\n      el = el || \"\";\r\n      if (el.toLowerCase().includes(\"option \")) {\r\n        opt.push(el.toLowerCase().replace(\"option \", \"\").toLowerCase());\r\n      }\r\n    });\r\n    setOptions(opt);\r\n    processCSV(rows[0], rows.slice(1));\r\n  };\r\n  const onDelete = useCallback(\r\n    (i, tagIndex) => {\r\n      const prevTags = tags ? { ...tags } : {};\r\n      prevTags[i] = prevTags[i].filter((_, i) => i !== tagIndex);\r\n      setTags(prevTags);\r\n    },\r\n    [tags]\r\n  );\r\n\r\n  const onAddition = useCallback(\r\n    (i, newTag) => {\r\n      const prevTags = tags ? { ...tags } : {};\r\n      const prevTagsList = [...tagsList];\r\n      if (\r\n        !prevTagsList.some(\r\n          (s) => s.name.toLowerCase() === newTag.name.toLowerCase()\r\n        )\r\n      ) {\r\n        prevTagsList[prevTagsList.length] = newTag;\r\n        setTagsList(prevTagsList);\r\n      }\r\n      if (\r\n        prevTags[i].some(\r\n          (s) => s.name.toLowerCase() === newTag.name.toLowerCase()\r\n        )\r\n      )\r\n        return;\r\n      prevTags[i] = [...prevTags[i], newTag];\r\n      setTags(prevTags);\r\n    },\r\n    [tags]\r\n  );\r\n  const onDeleteMain = useCallback(\r\n    (tagIndex) => {\r\n      const prevTags = mainTags ? [...mainTags] : [];\r\n      prevTags = prevTags.filter((_, i) => i !== tagIndex);\r\n      setMainTags(prevTags);\r\n    },\r\n    [tags]\r\n  );\r\n\r\n  const onAdditionMain = useCallback(\r\n    (newTag) => {\r\n      let prevTags = mainTags ? [...mainTags] : [];\r\n      const prevTagsList = [...tagsList];\r\n      if (\r\n        !prevTagsList.some(\r\n          (s) => s.name.toLowerCase() === newTag.name.toLowerCase()\r\n        )\r\n      ) {\r\n        prevTagsList[prevTagsList.length] = newTag;\r\n        setTagsList(prevTagsList);\r\n      }\r\n      if (\r\n        prevTags.some((s) => s.name.toLowerCase() === newTag.name.toLowerCase())\r\n      )\r\n        return;\r\n      prevTags = [...prevTags, newTag];\r\n      setMainTags(prevTags);\r\n    },\r\n    [mainTags]\r\n  );\r\n  const processCSV = (hdrs, rows) => {\r\n    const newArray = rows.map((row) => {\r\n      const qnsOptions = [];\r\n      const eachObject = hdrs.reduce((obj = {}, header, i) => {\r\n        let value = row[i];\r\n        if (header === \"Answers\") {\r\n          value = value.split(\",\");\r\n          value = value.map((v) => v.trim());\r\n          obj.single = value.length === 1;\r\n        }\r\n        if (header === \"Tags\" && value) {\r\n          value = value.split(\",\");\r\n          value = value.map((v) => v.trim());\r\n        }\r\n        if (header.toLowerCase().includes(\"option\") && value) {\r\n          qnsOptions.push(header.toLowerCase().replace(\"option \", \"\"));\r\n        }\r\n        obj[header] = value;\r\n\r\n        // obj[header] = values[i].slice(0, values[i].indexOf(\"\\r\"));\r\n        return obj;\r\n      }, {});\r\n      const answers = qnsOptions.map((qns) => {\r\n        return {\r\n          option: qns,\r\n          answer: eachObject.Answers.some((a) => a === qns),\r\n        };\r\n      });\r\n      eachObject.questionAnswers = answers;\r\n      return eachObject;\r\n    });\r\n    setCsvArray(newArray);\r\n    const tagsArr = {};\r\n    newArray.map((item, index) => {\r\n      if (item && item.Tags) {\r\n        const tagsArray = item.Tags.map((it, i) => {\r\n          return { id: i, name: it };\r\n        });\r\n        tagsArr[index] = tagsArray;\r\n      } else {\r\n        tagsArr[index] = [];\r\n      }\r\n    });\r\n    const tagsSuggestionsArr = [];\r\n    newArray.forEach((item, index) => {\r\n      if (item.Tags && item.Tags.length > 0) {\r\n        item.Tags.forEach((t) => {\r\n          if (!tagsSuggestionsArr.some((it) => it.name === t)) {\r\n            tagsSuggestionsArr.push({ id: tagsSuggestionsArr.length, name: t });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    setTagsList(tagsSuggestionsArr);\r\n    setMainTags(tagsSuggestionsArr);\r\n    setTags(tagsArr);\r\n  };\r\n  // console.log(\"tagsList\", tagsList);\r\n  // console.log(\"tags\", tags);\r\n  const submit = async () => {\r\n    const {\r\n      \"Cert related\": certRelated,\r\n      Domain,\r\n      \"File name\": fileName,\r\n      \"Module (specific)\": moduleSpecific,\r\n      \"No of Questions?\": noOfQuestions,\r\n      Nos,\r\n      Product,\r\n      \"Product specific\": productSpecific,\r\n      \"Question Mode\": questionMode,\r\n      \"Question Type\": questionType,\r\n      \"Skill Level\": skillLevel,\r\n      \"Source code\": sourceCode,\r\n      \"Source type\": sourceType,\r\n      comments,\r\n    } = csvArray[0];\r\n    const arrayToStore = csvArray.slice(1).map((question) => {\r\n      const {\r\n        \"Cert related\": certRelatedRow,\r\n        Domain: DomainRow,\r\n        \"File name\": fileNameRow,\r\n        \"Module (specific)\": moduleSpecificRow,\r\n        \"No of Questions?\": noOfQuestionsRow,\r\n        Nos: NosRow,\r\n        Product: ProductRow,\r\n        \"Product specific\": productSpecificRow,\r\n        \"Question Mode\": questionModeRow,\r\n        \"Question Type\": questionTypeRow,\r\n        \"Skill Level\": skillLevelRow,\r\n        \"Source code\": sourceCodeRow,\r\n        \"Source type\": sourceTypeRow,\r\n        questionAnswers,\r\n        commentsRow,\r\n        ...rest\r\n      } = question;\r\n      const qnsToSave = { ...rest };\r\n      qnsToSave.certRelated = certRelated;\r\n      qnsToSave.domain = DomainRow;\r\n      qnsToSave.product = ProductRow;\r\n      qnsToSave.fileName = csvFile.name;\r\n      qnsToSave.productSpecific = productSpecific;\r\n      qnsToSave.questionMode = questionMode;\r\n      qnsToSave.questionType = questionType;\r\n      qnsToSave.skillLevel = skillLevel;\r\n      qnsToSave.sourceCode = sourceCode;\r\n      qnsToSave.sourceType = sourceType;\r\n      qnsToSave.comments = comments;\r\n      const optionsWithAnswers = [];\r\n      debugger;\r\n      questionAnswers.forEach((qnsAns) => {\r\n        if (`Option ${qnsAns.option}` in qnsToSave) {\r\n          optionsWithAnswers.push({\r\n            option: qnsToSave[`Option ${qnsAns.option}`],\r\n            answer: qnsAns.answer,\r\n          });\r\n        }\r\n      });\r\n      qnsToSave.optionsWithAnswers = optionsWithAnswers;\r\n      return qnsToSave;\r\n    });\r\n    // console.log(\"arrayToStore\", arrayToStore);\r\n    // eachObject.tags = mainTags.map((t) => t.name);\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"questionFile\", csvFile);\r\n    mainTags.forEach((t) => {\r\n      formData.append(\"tags\", t.name);\r\n    });\r\n    formData.append(\"certRelated\", certRelated);\r\n    formData.append(\"domain\", Domain);\r\n    formData.append(\"noOfQuestions\", arrayToStore.length);\r\n    formData.append(\"product\", Product);\r\n    formData.append(\"productSpecific\", productSpecific);\r\n    formData.append(\"questionMode\", questionMode);\r\n\r\n    formData.append(\"questionType\", questionType);\r\n    formData.append(\"skillLevel\", skillLevel);\r\n    formData.append(\"sourceCode\", sourceCode);\r\n    formData.append(\"sourceType\", sourceType);\r\n    formData.append(\"comments\", comments);\r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_SERVER_URL}/api/questions/upload`,\r\n        formData\r\n      );\r\n      console.log(\"file upload\", response.data.qnsUpload);\r\n      if (response.data.status) {\r\n        const data = arrayToStore.map((item) => {\r\n          return {\r\n            question: item.Question,\r\n            optionsWithAnswers: item.optionsWithAnswers || [],\r\n            single: item.single,\r\n            fileName: item.fileName,\r\n            tags: item.Tags || [],\r\n            fileUploadId: response.data.qnsUpload._id,\r\n          };\r\n        });\r\n        const resp = await axios.post(\r\n          `${process.env.REACT_APP_SERVER_URL}/api/questions/setQuestions`,\r\n          { questions: data }\r\n        );\r\n        console.log(\"questions\", resp.data.questions);\r\n      }\r\n    } catch {}\r\n  };\r\n  const upload = () => {\r\n    main();\r\n    // const file = csvFile;\r\n    // const reader = new FileReader();\r\n\r\n    // reader.onload = function (e) {\r\n    //   const text = e.target.result;\r\n    //   console.log(text);\r\n    //   processCSV(text, \";\");\r\n    // };\r\n\r\n    // reader.readAsText(file);\r\n  };\r\n  // console.log(headers);\r\n  // console.log(\"csvArray\", csvArray);\r\n  // console.log(csvArray.length > 0);\r\n  // console.log(\"options\", options);\r\n  const giveAnswers = (index, isSingle, questionAnswers) => {\r\n    const onRadioChange = (e) => {\r\n      debugger;\r\n      const currCsvArr = [...csvArray];\r\n      let currentIndexQnsAns = [...currCsvArr[index].questionAnswers];\r\n      currentIndexQnsAns = currentIndexQnsAns.map((curr) => {\r\n        if (curr.option === e.target.value) {\r\n          curr.answer = true;\r\n        } else {\r\n          curr.answer = false;\r\n        }\r\n        return curr;\r\n      });\r\n      currCsvArr[index].questionAnswers = currentIndexQnsAns;\r\n      setCsvArray(currCsvArr);\r\n    };\r\n    const onCheckedChange = (e) => {\r\n      debugger;\r\n      const currCsvArr = [...csvArray];\r\n      let currentIndexQnsAns = [...currCsvArr[index].questionAnswers];\r\n      currentIndexQnsAns = currentIndexQnsAns.map((ech) => {\r\n        if (ech.option === e.target.value) ech.answer = !ech.answer;\r\n        return ech;\r\n      });\r\n      currCsvArr[index].questionAnswers = currentIndexQnsAns;\r\n      setCsvArray(currCsvArr);\r\n    };\r\n    let markup;\r\n    if (isSingle) {\r\n      markup = (\r\n        <FormGroup check>\r\n          <Container>\r\n            <Row>\r\n              {questionAnswers.map((ans) => {\r\n                return (\r\n                  <Col>\r\n                    <Input\r\n                      type=\"radio\"\r\n                      name={`radio${index}`}\r\n                      checked={ans.answer}\r\n                      value={ans.option}\r\n                      onChange={onRadioChange}\r\n                    />\r\n                    <Label check>{ans.option}</Label>\r\n                  </Col>\r\n                );\r\n              })}\r\n            </Row>\r\n          </Container>\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      markup = (\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              {questionAnswers.map((ans) => {\r\n                return (\r\n                  <FormGroup check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={ans.answer}\r\n                      value={ans.option}\r\n                      onChange={onCheckedChange}\r\n                    />\r\n                    <Label check>{ans.option}</Label>\r\n                  </FormGroup>\r\n                );\r\n              })}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return markup;\r\n  };\r\n  return (\r\n    <>\r\n      <form id=\"csv-form\" className=\"col-xs-9\">\r\n        <Container className=\"mt-5\">\r\n          <Row className=\"justify-content-center mb-3\">\r\n            <Col sm={10}>\r\n              <Input\r\n                name=\"file\"\r\n                type=\"file\"\r\n                accept=\".xlsx\"\r\n                id=\"csvFile\"\r\n                onClick={(e) => {\r\n                  setCsvArray([]);\r\n                  setMainTags([]);\r\n                }}\r\n                onChange={(e) => {\r\n                  setCsvFile(e.target.files[0]);\r\n                }}\r\n              />\r\n              {/* <input\r\n        type=\"file\"\r\n      ></input> */}\r\n              {/* <br /> */}\r\n            </Col>\r\n            <Col sm={\"auto\"} className=\"p-0\">\r\n              <button\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  if (csvFile) upload();\r\n                }}\r\n                style={{ padding: \"5px\" }}\r\n              >\r\n                Upload Excel\r\n              </button>\r\n            </Col>\r\n          </Row>\r\n          {tagsList && tagsList.length > 0 && (\r\n            <Row className=\"justify-content-center mb-3\">\r\n              <ReactTags\r\n                ref={reactTags}\r\n                minQueryLength={1}\r\n                tags={mainTags ? mainTags : []}\r\n                allowNew\r\n                suggestions={tagsList || []}\r\n                onDelete={onDeleteMain}\r\n                onAddition={onAdditionMain}\r\n              />\r\n            </Row>\r\n          )}\r\n          {csvArray.length > 0 && (\r\n            <Row className=\"justify-content-center mb-3\">\r\n              <Col xs={1}>\r\n                <button\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    submit();\r\n                  }}\r\n                  style={{ padding: \"5px\" }}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Container>\r\n      </form>\r\n      <br />\r\n      <br />\r\n      {csvArray.length > 0 ? (\r\n        <>\r\n          <Table bordered striped hover>\r\n            <thead>\r\n              <tr className=\"question-header\">\r\n                {headers.map((h, index) => {\r\n                  return <th>{h}</th>;\r\n                })}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {csvArray.map((item, i) => {\r\n                return (\r\n                  <tr key={i}>\r\n                    {headers.map((h, index) => {\r\n                      if (index === 0)\r\n                        return (\r\n                          <td className=\"question-first-col\">\r\n                            {item[headers[index]]}\r\n                          </td>\r\n                        );\r\n                      if (h === \"Tags\") {\r\n                        return (\r\n                          <td>\r\n                            <ReactTags\r\n                              ref={reactTags}\r\n                              minQueryLength={1}\r\n                              tags={tags ? tags[i] : []}\r\n                              allowNew\r\n                              suggestions={tagsList || []}\r\n                              onDelete={onDelete.bind(null, i)}\r\n                              onAddition={onAddition.bind(null, i)}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      } else if (h === \"Answers\") {\r\n                        return (\r\n                          <td>\r\n                            {giveAnswers(i, item.single, item.questionAnswers)}\r\n                          </td>\r\n                        );\r\n                      } else return <td>{item[headers[index]]}</td>;\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import QuestionAnswersCSVUpload from \"./components/QuestionAnswersCSVUpload\";\nimport \"./App.css\";\nconsole.log(\"REACT_APP_SERVER_URL\", process.env.REACT_APP_SERVER_URL);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuestionAnswersCSVUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}