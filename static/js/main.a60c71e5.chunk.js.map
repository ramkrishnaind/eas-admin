{"version":3,"sources":["components/TalentProfileUpload.js","App.js","index.js"],"names":["TalentProfileUpload","props","useState","csvFile","setCsvFile","headers","setHeaders","csvArray","setCsvArray","stepsObject","setStepsObject","main","a","readXlsxFile","rows","processCSV","slice","hdrs","newArray","map","row","eachObject","reduce","obj","header","i","value","trim","split","v","replace","objFinal","forEach","Object","keys","length","Product","Jobs","console","log","submit","formData","FormData","append","JSON","stringify","axios","post","process","resp","data","talentProfileUpload","id","className","sm","name","type","accept","onClick","e","onChange","target","files","preventDefault","style","padding","xs","bordered","striped","hover","h","index","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a60c71e5.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport axios from \"axios\";\r\nimport { Table, Input, Container, Row, Col } from \"reactstrap\";\r\nexport default function TalentProfileUpload(props) {\r\n  // const { isheader, isSrNo, answerColumnIndex, headerProps } = props;\r\n  const [csvFile, setCsvFile] = useState();\r\n  const [headers, setHeaders] = useState([]);\r\n\r\n  const [csvArray, setCsvArray] = useState([]);\r\n  const [stepsObject, setStepsObject] = useState({});\r\n  // [{name: \"\", age: 0, rank: \"\"},{name: \"\", age: 0, rank: \"\"}]\r\n  const main = async () => {\r\n    const rows = await readXlsxFile(csvFile);\r\n    setHeaders(rows[0]);\r\n    processCSV(rows[0], rows.slice(1));\r\n  };\r\n\r\n  const processCSV = (hdrs, rows) => {\r\n    // let uniqJobs = [...moduleUniqueJobs];\r\n    const newArray = rows.map((row) => {\r\n      let module;\r\n      const eachObject = hdrs.reduce((obj = {}, header, i) => {\r\n        if (i <= 3) {\r\n          let value = row[i];\r\n          if (i === 2) {\r\n            module = value;\r\n          }\r\n          if (header.trim() === \"Job roles\") {\r\n            // let moduleObj = uniqJobs.find((item) => item.module === module);\r\n            value = value || \"\";\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.replace(\"\\t\", \"\").trim());\r\n            // const res = [];\r\n            // value.forEach((item) => {\r\n            //   if (!res.includes(item)) res.push(item);\r\n            // });\r\n            // value = res;\r\n          }\r\n          if (header === \"Product\") {\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.trim());\r\n          }\r\n          obj[header] = value;\r\n        }\r\n        return obj;\r\n      }, {});\r\n      return eachObject;\r\n    });\r\n\r\n    setCsvArray(newArray);\r\n    const objFinal = {};\r\n    rows.forEach((row) => {\r\n      hdrs.forEach((header, i) => {\r\n        // debugger;\r\n        if (i <= 3) {\r\n          if (i === 0) {\r\n            if (!objFinal[row[0]]) objFinal[row[0]] = {};\r\n          }\r\n          if (i === 1) {\r\n            if (\r\n              Object.keys(objFinal[row[0]]).length === 0 ||\r\n              (objFinal[row[0]].keys && !objFinal[row[0]][row[1]])\r\n            ) {\r\n              objFinal[row[0]][row[1]] = {};\r\n            }\r\n          }\r\n          if (header === \"Product\") {\r\n            let value = row[i];\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.trim());\r\n            debugger;\r\n            if (objFinal[row[0]][row[1]])\r\n              objFinal[row[0]][row[1]].Product = value;\r\n          }\r\n          if (header.trim() === \"Job roles\") {\r\n            let value = row[i] || \"\";\r\n            value = value.split(\",\");\r\n            value = value.map((v) => v.trim());\r\n            if (objFinal[row[0]][row[1]]) objFinal[row[0]][row[1]].Jobs = value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    setStepsObject(objFinal);\r\n  };\r\n  console.log(\"csvArray\", csvArray);\r\n  // console.log(\"moduleUniqueJobs\", moduleUniqueJobs);\r\n  console.log(\"stepsObject\", stepsObject);\r\n  // console.log(\"sendArray\", sendArray);\r\n  const submit = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"talentProfileFile\", csvFile);\r\n    formData.append(\"steps\", JSON.stringify(stepsObject));\r\n    try {\r\n      const resp = await axios.post(\r\n        `${process.env.REACT_APP_SERVER_URL}/api/talentProfile/setTalentProfileSteps`,\r\n        formData\r\n      );\r\n      console.log(\"file upload\", resp.data.talentProfileUpload);\r\n    } catch {}\r\n  };\r\n  const upload = () => {\r\n    main();\r\n  };\r\n  return (\r\n    <>\r\n      <form id=\"csv-form\" className=\"col-xs-9\">\r\n        <Container className=\"mt-5\">\r\n          <Row className=\"justify-content-center mb-3\">\r\n            <Col sm={10}>\r\n              <Input\r\n                name=\"file\"\r\n                type=\"file\"\r\n                accept=\".xlsx\"\r\n                id=\"csvFile\"\r\n                onClick={(e) => {\r\n                  setCsvArray([]);\r\n                }}\r\n                onChange={(e) => {\r\n                  setCsvFile(e.target.files[0]);\r\n                }}\r\n              />\r\n              {/* <input\r\n        type=\"file\"\r\n      ></input> */}\r\n              {/* <br /> */}\r\n            </Col>\r\n            <Col sm={\"auto\"} className=\"p-0\">\r\n              <button\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  if (csvFile) upload();\r\n                }}\r\n                style={{ padding: \"5px\" }}\r\n              >\r\n                Upload Excel\r\n              </button>\r\n            </Col>\r\n          </Row>\r\n          {csvArray.length > 0 && (\r\n            <Row className=\"justify-content-center mb-3\">\r\n              <Col xs={1}>\r\n                <button\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    submit();\r\n                  }}\r\n                  style={{ padding: \"5px\" }}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Container>\r\n      </form>\r\n      <br />\r\n      <br />\r\n      {csvArray.length > 0 ? (\r\n        <>\r\n          <Table bordered striped hover>\r\n            <thead>\r\n              <tr className=\"question-header\">\r\n                {headers.map((h, index) => {\r\n                  return <th key={index}>{h}</th>;\r\n                })}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {csvArray.map((item, i) => {\r\n                return (\r\n                  <tr key={i}>\r\n                    {headers.map((h, index) => {\r\n                      // if (index === 0)\r\n                      //   return (\r\n                      //     <td className=\"question-first-col\" key={index}>\r\n                      //       {item[headers[index]]}\r\n                      //     </td>\r\n                      //   );\r\n                      return index <= 3 ? (\r\n                        <td>{item[headers[index]]}</td>\r\n                      ) : null;\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import QuestionAnswersCSVUpload from \"./components/QuestionAnswersCSVUpload\";\nimport TalentProfileUpload from \"./components/TalentProfileUpload\";\nimport \"./App.css\";\nconsole.log(\"REACT_APP_SERVER_URL\", process.env.REACT_APP_SERVER_URL);\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TalentProfileUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}